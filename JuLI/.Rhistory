#' callfusion()
callfusion=function(CaseBam=NULL,
ControlBam=NULL,
TestID=NULL,
OutputPath=NULL,
Thread=1,
ControlPanel=NULL,
TargetBed=NULL,
Refgene=NULL,
Gap=NULL,
AnalysisUnit=1000,
MinMappingQuality=20,
SplitCutoff=2,
DiscordantCutoff=3,
ShortInsert=FALSE,
SplitBalance=TRUE,
NucDiv=TRUE,
SplitRatio=0.7,
MatchBase=10,
Log=FALSE){
if(isEmpty(CaseBam)){MessageFun(1)}
if(isEmpty(TestID)){TestID = gsub('^.+/','',CaseBam)}
if(isEmpty(OutputPath)){OutputPath = gsub(paste0('/',gsub('^.+/','',CaseBam)),'',CaseBam)}
Thread=as.numeric(Thread);AnalysisUnit=as.numeric(AnalysisUnit);MinMappingQuality=as.numeric(MinMappingQuality);SplitCutoff=as.numeric(SplitCutoff);DiscordantCutoff=as.numeric(DiscordantCutoff);SplitRatio=as.numeric(SplitRatio);MatchBase=as.numeric(MatchBase)
SplitBalance = as.logical(SplitBalance);NucDiv = as.logical(NucDiv);Log = as.logical(Log);ShortInsert = as.logical(ShortInsert)
registerDoMC(Thread)
options(scipen = 999)
opts <<- list(preschedule=FALSE)
SplitCutoff = ifelse(SplitCutoff < 2,2,SplitCutoff)
DiscordantCutoff = ifelse(SplitCutoff < 3,3,DiscordantCutoff)
mat=matrix(0,5,5,dimnames=list(c("A","T","G","C","N"),c("A","T","G","C","N")))
mat["A","A"]=mat["C","C"]=mat["G","G"]=mat["T","T"]=1
if(isEmpty(Refgene)|isEmpty(Gap)){MessageFun(2)}
ref = fread(Refgene,showProgress = F) %>% setNames(paste0('V',c(1:ncol(.))))
GapData = fread(Gap,showProgress = F) %>% .[,c(2,3,4)] %>% setNames(c('chr','str','end')) %>% setkey(chr,str,end)
IndexFun(CaseBam,ControlBam)
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ",
paste0('callfusion(','CaseBam=',CaseBam,',ControlBam=',ifelse(isEmpty(ControlBam),'NULL',ControlBam),',TestID=',TestID,',OutputPath=',OutputPath,
',Thread=',Thread,',ControlPanel=',ifelse(isEmpty(ControlPanel),'NULL',ControlPanel),',TargetBed=',ifelse(isEmpty(TargetBed),'NULL',TargetBed),
',Refgene=',Refgene,',Gap=',Gap,',AnalysisUnit=',AnalysisUnit,',MinMappingQuality=',MinMappingQuality,',SplitCutoff=',SplitCutoff,',DiscordantCutoff=',DiscordantCutoff,
',ShortInsert=',as.character(ShortInsert),',SplitBalance=',as.character(SplitBalance),',NucDiv=',as.character(NucDiv),
',SplitRatio=',SplitRatio,',MatchBase=',MatchBase,',Log=',as.character(Log),')')))
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","JuLI v0.1.1"))
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Measuring bam statistics"))
bam.info=seqinfo(BamFile(CaseBam))
sl=seqlengths(bam.info)
chr=seqnames(bam.info) %>% .[. %in% paste0('chr',c(c(1:22),'X','Y'))]
readlen<<-scanBam(BamFile(CaseBam,yieldSize=1000),param=ScanBamParam(what='seq')) %>% data.frame() %>% .[,1] %>% nchar() %>% median()
out=foreach(c=1:length(chr),.options.multicore=opts) %dopar% {
tmp=scanBam(CaseBam,param=ScanBamParam(which=GRanges(chr[c],IRanges(1,sl[chr[c]])),what=c('cigar','isize'),mapqFilter=MinMappingQuality)) %>% rbindlist()
isize=tmp$isize %>% abs()
TotalReadNo=nrow(tmp)
SplitReadNo=tmp$cigar %>% .[.!='100M'] %>% .[grepl('S',.)] %>% length()
return(list(isize,TotalReadNo,SplitReadNo))
}
medis=out %>% sapply(.,function(x){x[[1]]}) %>% unlist() %>% median(.,na.rm=T)
TotalReadNumber= out %>% sapply(.,function(x){x[[2]]}) %>% sum()
SplitReadNumber= out %>% sapply(.,function(x){x[[3]]}) %>% sum()
StatDat=data.table(Chromosome=paste(chr,collapse=';'),ReferenceLength=sum(as.numeric(sl[names(sl) %in% chr])),TotalReadNumber,SplitReadNumber,MedianInsertSize=medis,ReadLength=readlen)
fwrite(StatDat,paste0(OutputPath,"/",TestID,".BamStat.txt"),sep='\t',showProgress=F)
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Identifying candidate breaks"))
if(!isEmpty(TargetBed)){
TargetBedDat=fread(TargetBed,sep='\t',showProgress=F) %>% setNames(c('chr','str','end')) %>% setkey(chr)
chr=chr[chr %in% unique(TargetBedDat$chr)] %>% as.character(.)
}
bed=foreach(c=1:length(chr),.options.multicore=opts) %dopar% {
if(isEmpty(TargetBed)){
what=c('pos','cigar')
param=ScanBamParam(which=GRanges(chr[c],IRanges(1,sl[chr[c]])),flag=scanBamFlag(isUnmappedQuery=FALSE),what=what,mapqFilter=MinMappingQuality)
tmp=scanBam(CaseBam,param=param) %>% rbindlist() %>% .[grepl('[SH]',cigar),]
}else{
TargetChr=chr[c]
pbed=TargetBedDat[TargetChr] %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
what=c('pos','cigar')
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isUnmappedQuery=FALSE),what=what,mapqFilter=MinMappingQuality)
tmp=scanBam(CaseBam,param=param) %>% rbindlist() %>% .[grepl('[SH]',cigar),]
}
if(!ShortInsert){
tmp=tmp[!(grepl('[SH][[:digit:]]+M',tmp$cigar) & grepl('M[[:digit:]]+[SH]',tmp$cigar)),]
}
if(nrow(tmp)!=0){
dat=tmp %>% mutate(end=pos+sapply(cigar,endfun)-1)
st.br=table(dat$pos[grepl('[SH][[:digit:]]+M',dat$cigar)]) %>% .[names(.) %in% unique(dat$pos[grepl('[S][[:digit:]]+M',dat$cigar)])]
if(length(st.br)!=0){
st.br=data.frame(V1=names(st.br),N=as.numeric(st.br),ori=0,stringsAsFactors = F)
}else{
st.br=data.frame(matrix(ncol=3))[0,]
}
en.br=table(dat$end[grepl('M[[:digit:]]+[SH]',dat$cigar)]) %>% .[names(.) %in% unique(dat$end[grepl('M[[:digit:]]+[S]',dat$cigar)])]
if(length(en.br)!=0){
en.br=data.frame(V1=names(en.br),N=as.numeric(en.br),ori=1,stringsAsFactors = F)
}else{
en.br=data.frame(matrix(ncol=3))[0,]
}
sh.br=rbind(st.br,en.br) %>% filter(N >= SplitCutoff) %>% mutate(str=as.numeric(V1),chr=chr[c]) %>% arrange(str) %>% mutate(end=str) %>% select(chr,str,end,ori,N) %>% data.table() %>% foverlaps(.,GapData,type="within") %>% filter(is.na(str)) %>% select(chr,i.str,ori,N)
}else{sh.br=data.table(matrix(ncol=4))[0,]}
return(sh.br)
} %>% rbindlist() %>% setNames(c('chr','pos','ori','splno'))
bedLog=bed[,c(1,2,3)] %>% mutate(DiscordantPairLog="Pass",ProperPairLog="Pass")
if(!isEmpty(ControlBam)){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Filtering breaks in control bam"))
out=foreach(c=1:length(chr),.options.multicore=opts) %dopar% {
if(isEmpty(TargetBed)){
what=c('pos','cigar')
param=ScanBamParam(which=GRanges(chr[c],IRanges(1,sl[chr[c]])),flag=scanBamFlag(isUnmappedQuery=FALSE),what=what,mapqFilter=MinMappingQuality)
tmp=scanBam(ControlBam,param=param) %>% rbindlist() %>% .[grepl('[SH]',cigar),]
}else{
TargetChr=chr[c]
pbed=TargetBedDat[TargetChr] %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
what=c('pos','cigar')
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isUnmappedQuery=FALSE),what=what,mapqFilter=MinMappingQuality)
tmp=scanBam(ControlBam,param=param) %>% rbindlist() %>% .[grepl('[SH]',cigar),]
}
if(nrow(tmp)!=0){
dat=tmp %>% mutate(end=pos+sapply(cigar,endfun)-1)
st.br=table(dat$pos[grepl('[SH][[:digit:]]+M',dat$cigar)])
if(length(st.br)!=0){
st.br=data.frame(V1=names(st.br),N=as.numeric(st.br),ori=0,stringsAsFactors = F)
}else{
st.br=data.frame(matrix(ncol=3))[0,]
}
en.br=table(dat$end[grepl('M[[:digit:]]+[SH]',dat$cigar)])
if(length(en.br)!=0){
en.br=data.frame(V1=names(en.br),N=as.numeric(en.br),ori=1,stringsAsFactors = F)
}else{
en.br=data.frame(matrix(ncol=3))[0,]
}
sh.br=rbind(st.br,en.br) %>% filter(N >= SplitCutoff*2) %>% mutate(str=as.numeric(V1),chr=chr[c]) %>% arrange(str) %>% mutate(end=str) %>% select(chr,str,end,ori,N) %>% data.table() %>% foverlaps(.,GapData,type="within") %>% filter(is.na(str)) %>% select(chr,i.str,ori,N)
}else{sh.br=data.table(matrix(ncol=4))[0,]}
return(sh.br)
} %>% rbindlist() %>% setNames(c('chr','pos','ori','splno'))
bed.n=out %>% select(chr,pos) %>% mutate(end=pos) %>% data.table() %>% setkey(chr,pos,end)
bed=bed %>% mutate(end=pos) %>% select(chr,pos,end,ori,splno) %>% data.table() %>% foverlaps(.,bed.n,type="within") %>% filter(is.na(pos)) %>% select(chr,i.pos,ori,splno) %>% setNames(c('chr','pos','ori','splno'))
bedLog=logfun(Log,bedLog,bed,4,"Break in the control")
bedLog=logfun(Log,bedLog,bed,5,"Break in the control")
}
if(!isEmpty(ControlPanel)){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Filtering breaks in control panel"))
ConPanbed=fread(ControlPanel,sep='\t',showProgress=F)
bed.n=ConPanbed %>% select(chr,pos) %>% mutate(end=pos) %>% data.table() %>% setkey(chr,pos,end)
bed=bed %>% mutate(end=pos) %>% select(chr,pos,end,ori,splno) %>% data.table() %>% foverlaps(.,bed.n,type="within") %>% filter(is.na(pos)) %>% select(chr,i.pos,ori,splno) %>% setNames(c('chr','pos','ori','splno'))
bedLog=logfun(Log,bedLog,bed,4,"Break in the control panel")
bedLog=logfun(Log,bedLog,bed,5,"Break in the control panel")
}
bedD=bedP=bed
bed_D=bed_P=data.table(matrix(ncol=6))[0,]
if(nrow(bedD)!= 0){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Analysing discordant pairs"))
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","-Counting supporting reads"))
bed.ran=ranfun(bedD$chr,AnalysisUnit)
bedD=foreach(b=1:length(bed.ran),.options.multicore=opts) %dopar% {
bchr=gsub('/.+$','',bed.ran[b])
pbed=pbedfun(bedD,bed.ran[b],readlen,medis) %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
pbed2=pbedfun(bedD,bed.ran[b],2,medis)
what=c("pos","cigar","mrnm","mpos")
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isProperPair=FALSE,isUnmappedQuery=FALSE,hasUnmappedMate=FALSE,isMinusStrand=FALSE),what=what,mapqFilter=MinMappingQuality)
tmp1=scanBam(CaseBam,param=param) %>% rbindlist() %>% mutate(ori=1)
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isProperPair=FALSE,isUnmappedQuery=FALSE,hasUnmappedMate=FALSE,isMinusStrand=TRUE),what=what,mapqFilter=MinMappingQuality)
tmp2=scanBam(CaseBam,param=param) %>% rbindlist() %>% mutate(ori=0)
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isSecondaryAlignment=TRUE),what=what,mapqFilter=MinMappingQuality)
tmp3=scanBam(CaseBam,param=param) %>% rbindlist() %>% mutate(ori=2)
dat=rbind(tmp1,tmp2,tmp3) %>% mutate_if(is.factor, as.character)
param=ScanBamParam(which=GRanges(pbed),what=what,tag="SA",mapqFilter=MinMappingQuality)
tag.dat=scanBam(CaseBam,param=param) %>% .[sapply(., function(x){!isEmpty(x$tag$SA)})] %>% lapply(.,function(x){data.frame(x) %>% mutate_if(is.factor, as.character)}) %>% rbindlist()
if(nrow(tag.dat)!=0){
tag.dat=tag.dat %>% .[!is.na(.$SA),] %>% select(pos,cigar,SA) %>% mutate(mrnm=gsub(',.+$','',SA),mpos=as.numeric(gsub(',.+$','',gsub('^[[:alnum:]]+,','',SA))),ori=2) %>% select(-SA)
}
tdat=rbind(dat,tag.dat)
tdat$ori[grepl('M[[:digit:]]+[SH]',tdat$cigar)]=1
tdat$ori[grepl('[SH][[:digit:]]+M',tdat$cigar)]=0
tdat$ori[grepl('[SH].+M.+[SH]',tdat$cigar)]=2
tdat=unique(tdat)
if(nrow(tdat)!=0){
tdat=tdat %>% mutate(end=pos+sapply(cigar,endfun)-1)
tdat.0=tdat[tdat$ori!=1,] %>% mutate(str2=pos,end2=pos) %>% data.table()
pbed2.0=pbed2[pbed2$ori==0,] %>% select(chr,str,end,pos) %>% setNames(c("chr","str2","end2","pos")) %>% setkey(str2,end2)
tdat.pbed.0=foverlaps(tdat.0,pbed2.0,type="within") %>% filter(!is.na(chr)) %>% data.table() %>% select(pos,i.pos,cigar,mrnm,mpos,ori,end) %>% setNames(c('pos','str','cigar','mrnm','mpos','ori','end')) %>% setkey(pos)
tdat.1=tdat[tdat$ori!=0,] %>% mutate(str2=end,end2=end) %>% data.table()
pbed2.1=pbed2[pbed2$ori==1,] %>%  select(chr,str,end,pos) %>% setNames(c("chr","str2","end2","pos")) %>% setkey(str2,end2)
tdat.pbed.1=foverlaps(tdat.1,pbed2.1,type="within") %>% filter(!is.na(chr)) %>% data.table() %>% select(pos,i.pos,cigar,mrnm,mpos,ori,end) %>% setNames(c('pos','str','cigar','mrnm','mpos','ori','end')) %>% setkey(pos)
pairfun=function(bchr,bpos,bori){
if(bori==0){pdat=tdat.pbed.0[J(bpos)] %>% .[!(grepl('[SH]',cigar) & bpos < str)]}
if(bori==1){pdat=tdat.pbed.1[J(bpos)] %>% .[!(grepl('[SH]',cigar) & end < bpos)]}
pdat=pdat[!(mrnm==bchr & mpos %between% c(bpos-medis*2,bpos+medis*2))] %>% .[!duplicated(paste(str,mrnm,mpos,end))]
tc=table(pdat$mrnm) %>% .[.>=DiscordantCutoff] %>% names()
if(length(tc)!=0){
pdat=pdat[order(pdat$mrnm,pdat$mpos),]
overfun=function(tc){
cpdat=pdat[pdat$mrnm==tc,]
clu.pos=which(abs(c(cpdat$mpos[-1],-(medis*2))-cpdat$mpos) > medis*2)
max(clu.pos-c(0,clu.pos[-length(clu.pos)]))
}
out=max(sapply(tc,overfun))
}else{out=0}
return(out)
}
ppbed=pbed %>% data.frame() %>% mutate_if(is.factor, as.character) %>% mutate(disno=mapply(pairfun,bchr,pbed$pos,pbed$ori)) %>% select(seqnames,pos,ori,splno,disno)
}else{
ppbed=data.table(matrix(ncol=5))[0,]
}
return(ppbed)
} %>% rbindlist() %>% setNames(c("chr","pos","ori","splno","disno")) %>% filter(disno >= DiscordantCutoff)
bedLog=logfun(Log,bedLog,bedD,4,"Reads count under the cutoff")
if(SplitBalance){
bedD= bedD %>% filter(splno >= disno*readlen/(medis*2))
bedLog=logfun(Log,bedLog,bedD,4,"Unbalance split reads count")
}
}
if(nrow(bedD)!= 0){
bed.ran=ranfun(bedD$chr,AnalysisUnit)
bedD=foreach(b=1:length(bed.ran),.options.multicore=opts) %dopar% {
bchr=gsub('/.+$','',bed.ran[b])
pbed=pbedfun(bedD,bed.ran[b],readlen,medis) %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
pbed2=pbedfun(bedD,bed.ran[b],2,medis)
what=c('qname',"pos","cigar","mrnm","mpos")
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isProperPair=FALSE,isUnmappedQuery=FALSE,hasUnmappedMate=FALSE,isMinusStrand=FALSE),what=what,mapqFilter=MinMappingQuality)
tmp1=scanBam(CaseBam,param=param) %>% rbindlist() %>% mutate(ori=1)
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isProperPair=FALSE,isUnmappedQuery=FALSE,hasUnmappedMate=FALSE,isMinusStrand=TRUE),what=what,mapqFilter=MinMappingQuality)
tmp2=scanBam(CaseBam,param=param) %>% rbindlist() %>% mutate(ori=0)
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isSecondaryAlignment=TRUE),what=what,mapqFilter=MinMappingQuality)
tmp3=scanBam(CaseBam,param=param) %>% rbindlist() %>% mutate(ori=2)
dat=rbind(tmp1,tmp2,tmp3) %>% mutate_if(is.factor, as.character)
param=ScanBamParam(which=GRanges(pbed),what=what,tag="SA",mapqFilter=MinMappingQuality)
tag.dat=scanBam(CaseBam,param=param) %>% .[sapply(., function(x){!isEmpty(x$tag$SA)})] %>% lapply(.,function(x){data.frame(x) %>% mutate_if(is.factor, as.character)}) %>% rbindlist()
if(nrow(tag.dat)!=0){
tag.dat= tag.dat %>% .[!is.na(.$SA),] %>% select(qname,pos,cigar,SA) %>% mutate(mrnm=gsub(',.+$','',SA),mpos=as.numeric(gsub(',.+$','',gsub('^[[:alnum:]]+,','',SA))),ori=2) %>% select(-SA)
}
tdat=unique(rbind(dat,tag.dat))
tdat$ori[grepl('M[[:digit:]]+[SH]',tdat$cigar)]=1
tdat$ori[grepl('[SH][[:digit:]]+M',tdat$cigar)]=0
tdat$ori[grepl('[SH].+M.+[SH]',tdat$cigar)]=2
tdat=unique(tdat)
tdat=tdat %>% mutate(end=pos+sapply(cigar,endfun)-1)
tdat.0=tdat[tdat$ori!=1,] %>% mutate(str2=pos,end2=pos) %>% data.table()
pbed2.0=pbed2[pbed2$ori==0,] %>% select(chr,str,end,pos) %>% setNames(c("chr","str2","end2","pos")) %>% setkey(str2,end2)
tdat.pbed.0=foverlaps(tdat.0,pbed2.0,type="within") %>% filter(!is.na(chr)) %>% data.table() %>% select(pos,qname,i.pos,cigar,mrnm,mpos,ori,end) %>% setNames(c('pos','qname','str','cigar','mrnm','mpos','ori','end')) %>% setkey(pos)
tdat.1=tdat[tdat$ori!=0,] %>% mutate(str2=end,end2=end) %>% data.table()
pbed2.1=pbed2[pbed2$ori==1,] %>% select(chr,str,end,pos) %>% setNames(c("chr","str2","end2","pos")) %>% setkey(str2,end2)
tdat.pbed.1=foverlaps(tdat.1,pbed2.1,type="within") %>% filter(!is.na(chr)) %>% data.table() %>% select(pos,qname,i.pos,cigar,mrnm,mpos,ori,end) %>% setNames(c('pos','qname','str','cigar','mrnm','mpos','ori','end')) %>% setkey(pos)
namefun=function(bchr,bpos,bori){
if(bori==0){pdat=tdat.pbed.0[J(bpos)] %>% .[!(grepl('[SH]',cigar) & bpos < str)]}
if(bori==1){pdat=tdat.pbed.1[J(bpos)] %>% .[!(grepl('[SH]',cigar) & end < bpos)]}
pdat=pdat[!(mrnm==bchr & mpos %between% c(bpos-medis*2,bpos+medis*2))]
pdat=pdat[order(match(pdat$qname,names(sort(table(pdat$qname),decreasing=T)))),] %>% .[!(.$qname %in% .$qnam[duplicated(paste(str,mrnm,mpos,end))])]
tc=table(pdat$mrnm) %>% .[.>=DiscordantCutoff] %>% names()
if(length(tc)!=0){
pdat=pdat[order(pdat$mrnm,pdat$mpos),]
overfun=function(tc){
out=""
cpdat=pdat[pdat$mrnm==tc,]
clu.pos=which(abs(c(cpdat$mpos[-1],-(medis*2))-cpdat$mpos) > medis*2)
clunamefun=function(cp){
tmp.cpdat=cpdat[c((c(0,clu.pos[-length(clu.pos)])[clu.pos==cp]+1):clu.pos[clu.pos==cp]),]
if( length(unique(tmp.cpdat$qname)) >= DiscordantCutoff ){
out=unique(tmp.cpdat$qname)
}else{out=""}
return(out)
}
return(unlist(sapply(clu.pos,clunamefun)))
}
out=unlist(sapply(tc,overfun))
out=paste(out[out!=""],collapse='/')
}else{out=""}
return(out)
}
return(pbed %>% data.frame() %>% mutate_if(is.factor, as.character) %>% mutate(qnames=mapply(namefun,bchr,pbed$pos,pbed$ori)) %>% select(seqnames,pos,ori,splno,disno,qnames))
} %>% rbindlist() %>% setNames(c("chr","pos","ori","splno","disno","qnames")) %>% filter(qnames!="")
bedLog=logfun(Log,bedLog,bedD,4,"Reads count under the cutoff")
}
if(nrow(bedD)!= 0){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","-Generating consensus contigs"))
bed.ran=ranfun(bedD$chr,AnalysisUnit)
bedD=foreach(b=1:length(bed.ran),.options.multicore=opts) %dopar% {
bchr=gsub('/.+$','',bed.ran[b])
pbed=pbedfun(bedD,bed.ran[b],readlen,medis) %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
param=ScanBamParam(which=GRanges(pbed),what=c("pos","cigar",'seq'),mapqFilter=MinMappingQuality)
dat=scanBam(CaseBam,param=param) %>% lapply(.,function(x){data.frame(x) %>% mutate_if(is.factor, as.character)}) %>% rbindlist() %>% .[grepl('[SH]',cigar),] %>% mutate(end=pos+sapply(cigar,endfun)-1) %>% setNames(c("str","cigar","seq","end"))
dat_SM=dat[grepl('[SH][[:digit:]]+M',dat$cigar),] %>% data.table() %>% setkey(str)
dat_MS=dat[grepl('M[[:digit:]]+[SH]',dat$cigar),] %>% data.table() %>% setkey(end)
mmfun=function(bpos,bori){
if(bori==0){
pdat=dat_SM[J(bpos),]
scbase=scbasefun.sm(pdat$cigar,pdat$seq)
mbase = mbasefun(pdat$cigar,pdat$seq)
}
if(bori==1){
pdat=dat_MS[J(bpos),]
scbase=scbasefun.ms(pdat$cigar,pdat$seq)
mbase = mbasefun(pdat$cigar,pdat$seq) %>% reverse()
}
con_mbase=consensusString(DNAStringSet(mbase),ambiguityMap='N',threshold=0.5)
NucDivmbase=NucDivFun(mbase,con_mbase)
if(any(nchar(scbase) >= MatchBase)){
con_scbase=consensusString(DNAStringSet(scbase),ambiguityMap='N',threshold=0.5)
NucDivscbase=NucDivFun(scbase,con_scbase)
}else{
con_scbase='N'
NucDivscbase=NA
}
return(c(paste(con_scbase,con_mbase,sep='/'),NucDivscbase,NucDivmbase))
}
return(cbind(pbed %>% data.frame() %>% mutate_if(is.factor, as.character) %>% select(seqnames,pos,ori,splno,disno,qnames),mapply(mmfun,pbed$pos,pbed$ori) %>% t() %>% data.frame() %>% mutate_if(is.factor, as.character)))
} %>% rbindlist() %>% setNames(c("chr","pos","ori","splno","disno","qnames","seq","nucdiv_scbase","nucdiv_mbase")) %>% mutate(nucdiv_scbase=as.numeric(nucdiv_scbase),nucdiv_mbase=as.numeric(nucdiv_mbase))
if(NucDiv){
nucdiv_cutoff=ifelse(sum(bedD$nucdiv_mbase!=0)>=2,mean(bedD$nucdiv_mbase[bedD$nucdiv_mbase!=0])+2*sd(bedD$nucdiv_mbase[bedD$nucdiv_mbase!=0]),0)
bedD=bedD %>% filter((nucdiv_scbase <= nucdiv_cutoff | is.na(nucdiv_scbase)) & (nucdiv_mbase <= nucdiv_cutoff))
bedLog=logfun(Log,bedLog,bedD,4,"Break with high nucleotide diversity")
}
bedD=bedD %>% select(chr,pos,ori,splno,disno,seq,qnames)
}
if(nrow(bedD)!=0){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","-Comparing contigs betweem breaks"))
nbed=rbindlist(foreach(i=1:nrow(bedD),.options.multicore=opts) %dopar% {data.table(bedD[i,c(1,2,3)],qname=unlist(strsplit(bedD$qnames[i],'/')))})
setkey(nbed,"qname")
count.br=foreach(b=1:nrow(bedD),.options.multicore=opts) %dopar% {
pnbed=nbed[unique(unlist(strsplit(bedD$qnames[b],'/')))] %>% select(chr,pos,ori) %>% unique() %>% arrange(pos) %>% left_join(data.table(chr=chr[chr %in% .$chr]),.,by='chr') %>% .[-(1:last(which(.$chr==bedD$chr[b] & .$pos==bedD$pos[b]))),] %>% filter(!(chr==bedD$chr[b] & pos < (bedD$pos[b]+medis)))
if(nrow(pnbed) !=0){
basecomfun=function(bchr,bpos,bori){
rbase=unlist(strsplit(bedD$seq[b],'/'))
pbase=unlist(strsplit(bedD %>% filter(chr==bchr,pos==bpos,ori==bori) %>% .[[6]],'/'))
if(bedD$ori[b] == bori){pbase=chartr("ATGC","TACG",pbase)}
com1=pairwiseAlignment(rbase[1],substr(pbase[2],1,nchar(rbase[1])*1.5),type="local",substitutionMatrix=mat,gapOpening=-1,gapExtension=-1,scoreOnly=T)
com2=pairwiseAlignment(pbase[1],substr(rbase[2],1,nchar(pbase[1])*1.5),type="local",substitutionMatrix=mat,gapOpening=-1,gapExtension=-1,scoreOnly=T)
if( (com1 >= nchar(gsub('N','',rbase[1]))*SplitRatio & com1 >=MatchBase) | (com2 >=nchar(gsub('N','',pbase[1]))*SplitRatio & com2 >= MatchBase)){out=paste(bchr,bpos,bori,sep='/')}else{out=NA}
return(out)
}
count.br=unique(unlist(mapply(basecomfun,pnbed$chr,pnbed$pos,pnbed$ori)))
count.br=paste(count.br[!is.na(count.br)],collapse=';')
}else{count.br=NA}
count.br
}
bed_tmp=bedD %>% select(chr,pos,ori,splno,disno) %>% mutate(part=unlist(count.br)) %>% filter(!is.na(part) & part!='')
if(nrow(bed_tmp)!=0){
bed_tmp=data.table(bed_tmp[,c(1:5)],part=unlist(foreach(b=1:nrow(bed_tmp),.options.multicore=opts) %dopar% {selectfun(bed_tmp$part[b],bedD)}))
bed_D=rbind(bed_tmp,rbindlist(foreach(b=1:nrow(bed_tmp),.options.multicore=opts) %dopar% {dupfun(b,bed_tmp,bedD)}))
}
bedLog=logfun(Log,bedLog,bed_D,4,"Unmatched contig sequences")
}
if(nrow(bedP)!= 0){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Analysing proper pairs"))
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","-Counting supporting reads"))
bed.ran=ranfun(bedP$chr,AnalysisUnit)
bedP=foreach(b=1:length(bed.ran),.options.multicore=opts) %dopar% {
bchr=gsub('/.+$','',bed.ran[b])
pbed=pbedfun(bedP,bed.ran[b],readlen,medis) %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isProperPair=TRUE,isUnmappedQuery=FALSE),what=c("qname","pos","cigar","isize"),mapqFilter=MinMappingQuality)
dat=scanBam(CaseBam,param=param) %>% rbindlist() %>% .[grepl('S',cigar),] %>% setNames(c("qname","str","cigar","isize"))
if(nrow(dat)!=0){
dat=dat %>% mutate(ori=0,end=str+sapply(cigar,endfun)-1)
dat$ori[grepl('M[[:digit:]]+[S]',dat$cigar)]=1
dat$ori[grepl('[S][[:digit:]]+M',dat$cigar)]=0
dat$ori[grepl('[S].+M.+[S]',dat$cigar)]=2
dat=unique(dat)
dat_0=dat[dat$ori!=1,] %>% data.table() %>% setkey(str)
dat_1=dat[dat$ori!=0,] %>% data.table() %>% setkey(end)
namefun=function(bpos,bori){
if(bori==0){pdat=dat_0[J(bpos),]}
if(bori==1){pdat=dat_1[J(bpos),]}
pdat=pdat[order(match(pdat$qname,names(sort(table(pdat$qname),decreasing=T)))),]
pdat=pdat[!duplicated(paste(pdat$str,pdat$cigar,pdat$end)),]
length(unique(pdat$qname))
}
ppbed=pbed %>% data.frame() %>% mutate_if(is.factor, as.character) %>% select(seqnames,pos,ori) %>% mutate(splno=mapply(namefun,pbed$pos,pbed$ori),disno=0) %>% filter(splno >= ifelse(SplitCutoff==2,3,SplitCutoff))
}else{
ppbed=data.table(matrix(ncol=5))[0,]
}
} %>% rbindlist() %>% setNames(c("chr","pos","ori","splno","disno"))
bedLog=logfun(Log,bedLog,bedP,5,"Reads count under the cutoff")
}
if(nrow(bedP)!= 0){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","-Generating consensus contigs"))
bed.ran=ranfun(bedP$chr,AnalysisUnit)
bedP=foreach(b=1:length(bed.ran),.options.multicore=opts) %dopar% {
bchr=gsub('/.+$','',bed.ran[b])
pbed=pbedfun(bedP,bed.ran[b],readlen,medis) %>% makeGRangesFromDataFrame(.,keep.extra.columns=TRUE,ignore.strand=TRUE,seqnames.field='chr',start.field='str',end.field='end')
param=ScanBamParam(which=GRanges(pbed),flag=scanBamFlag(isUnmappedQuery=FALSE),what=c("pos","cigar","seq"),mapqFilter=MinMappingQuality)
dat=scanBam(CaseBam,param=param) %>% lapply(.,function(x){data.frame(x) %>% mutate_if(is.factor, as.character)}) %>% rbindlist() %>% .[grepl('[SH]',cigar),] %>% mutate(end=pos+sapply(cigar,endfun)-1) %>% setNames(c("str","cigar","seq","end"))
dat_SM=dat[grepl('[SH][[:digit:]]+M',dat$cigar),] %>% data.table() %>% setkey(str)
dat_MS=dat[grepl('M[[:digit:]]+[SH]',dat$cigar),] %>% data.table() %>% setkey(end)
mmfun=function(bpos,bori){
if(bori==0){
pdat=dat_SM[J(bpos)]
scbase=scbasefun.sm(pdat$cigar,pdat$seq)
mbase = mbasefun(pdat$cigar,pdat$seq)
}
if(bori==1){
pdat=dat_MS[J(bpos)]
scbase=scbasefun.ms(pdat$cigar,pdat$seq)
mbase = mbasefun(pdat$cigar,pdat$seq) %>% reverse()
}
con_mbase=consensusString(DNAStringSet(mbase),ambiguityMap='N',threshold=0.5)
NucDivmbase=NucDivFun(mbase,con_mbase)
if(any(nchar(scbase) >= MatchBase)){
con_scbase=consensusString(DNAStringSet(scbase),ambiguityMap='N',threshold=0.5)
NucDivscbase=NucDivFun(scbase,con_scbase)
out=c(paste(con_scbase,con_mbase,sep='/'),NucDivscbase,NucDivmbase)
}else{out=c(NA,NA,NA)}
return(out)
}
return(cbind(pbed %>% data.frame() %>% mutate_if(is.factor, as.character) %>% select(seqnames,pos,ori,splno,disno),mapply(mmfun,pbed$pos,pbed$ori) %>% t() %>% data.frame() %>% mutate_if(is.factor, as.character)))
} %>% rbindlist() %>% setNames(c("chr","pos","ori","splno","disno","seq","nucdiv_scbase","nucdiv_mbase")) %>% mutate(nucdiv_scbase=as.numeric(nucdiv_scbase),nucdiv_mbase=as.numeric(nucdiv_mbase)) %>% .[!is.na(.$nucdiv_mbase),]
if(NucDiv){
nucdiv_cutoff=ifelse(sum(bedP$nucdiv_mbase!=0)>=2,mean(bedP$nucdiv_mbase[bedP$nucdiv_mbase!=0])+2*sd(bedP$nucdiv_mbase[bedP$nucdiv_mbase!=0]),0)
tbed=bedP %>% filter(nucdiv_scbase <= nucdiv_cutoff & nucdiv_mbase <= nucdiv_cutoff)
bedLog=logfun(Log,bedLog,tbed,5,"Break with high nucleotide diversity")
}else{
tbed=bedP
}
tbed=tbed %>% select(chr,pos,ori,splno,disno,seq)
}
if(nrow(tbed)!= 0){
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","-Comparing contigs betweem breaks"))
bed_P=list()
for(c in 1:length(chr)){
bed=tbed %>% .[.$chr==chr[c],] %>% mutate(str=pos,end=pos) %>% data.table()
pbed=data.table(str=bed$pos-medis*2,end=bed$pos+medis*2,br=bed$pos) %>% setkey(str,end)
ppbed=foverlaps(bed,pbed,type="within") %>% select(br,chr,pos,ori,splno,disno,seq) %>% data.table() %>% setkey(br)
if(nrow(bed)!=0){
count.br=foreach(b=1:nrow(bed),.options.multicore=opts) %dopar% {
bed.can=ppbed[J(bed$pos[b])] %>% arrange(pos) %>% .[-(1:last(which(.$pos==bed$pos[b]))),] %>% data.table()
if(nrow(bed.can)!=0 ){
basecomfun=function(bpos,bori){
out=NA
rbase=unlist(strsplit(bed$seq[b],'/'))
pbase=unlist(strsplit(bed.can %>% filter(pos==bpos,ori==bori) %>% .$seq,'/'))
if(bed$ori[b] == bori){pbase=chartr("ATGC","TACG",pbase)}
br.len=bpos-bed$pos[b]
if( bed$ori[b]==0 & bori==1 & br.len <= readlen ){
tdfun=function(no){
prbase1=substr(rbase[1],((no-1)*br.len+1),nchar(rbase[1]))
ppbase1=substr(pbase[1],((no-1)*br.len+1),nchar(pbase[1]))
if( nchar(prbase1) >=MatchBase & nchar(ppbase1) >=MatchBase){
com1=pairwiseAlignment(prbase1,substr(pbase[2],1,nchar(prbase1)*1.5),type="local",substitutionMatrix=mat,gapOpening=-1,gapExtension=-1,scoreOnly=T)
com2=pairwiseAlignment(ppbase1,substr(rbase[2],1,nchar(ppbase1)*1.5),type="local",substitutionMatrix=mat,gapOpening=-1,gapExtension=-1,scoreOnly=T)
out= com1 >= nchar(prbase1)*SplitRatio & com2 >= nchar(ppbase1)*SplitRatio
}else{out=FALSE}
}
if(any(sapply(c(1:floor(readlen/br.len)),tdfun))){
out=paste(chr[c],bpos,bori,sep='/')  #for multicopy tandem
}
}else{
com1=pairwiseAlignment(rbase[1],substr(pbase[2],1,nchar(rbase[1])*1.5),type="local",substitutionMatrix=mat,gapOpening=-1,gapExtension=-1,scoreOnly=T)
com2=pairwiseAlignment(pbase[1],substr(rbase[2],1,nchar(pbase[1])*1.5),type="local",substitutionMatrix=mat,gapOpening=-1,gapExtension=-1,scoreOnly=T)
if( com1 >= nchar(rbase[1])*SplitRatio & com2 >= nchar(pbase[1])*SplitRatio ){
out=paste(chr[c],bpos,bori,sep='/')
}
}
return(out)
}
count.br.each=unique(unlist(mapply(basecomfun,bed.can$pos,bed.can$ori)))
count.br=paste(count.br.each[!is.na(count.br.each)],collapse=';')
}else{count.br=NA}
count.br
}
bed_tmp=bed %>% select(chr,pos,ori,splno,disno) %>% mutate(part=unlist(count.br)) %>% filter(!is.na(part) & part!='')
if(nrow(bed_tmp)!=0){
bed_tmp=data.table(bed_tmp[,c(1:5)],part=unlist(foreach(b=1:nrow(bed_tmp),.options.multicore=opts) %dopar% {selectfun(bed_tmp$part[b],bed)}))
bed_tmp=rbind(bed_tmp,rbindlist(foreach(b=1:nrow(bed_tmp),.options.multicore=opts) %dopar% {dupfun(b,bed_tmp,bed)}))
}
}else{bed_tmp=data.frame(matrix(ncol=6))[0,]}
bed_P[[c]]=bed_tmp
}
bed_P=rbindlist(bed_P)
bedLog=logfun(Log,bedLog,bed_P,5,"Unmatched contig sequences")
}
if(Log){
fwrite(bedLog,paste0(OutputPath,'/',TestID,'.log'),sep="\t",showProgress=F)
}
colnames(bed_D)=colnames(bed_P)=c('chr','pos','ori','spl','dis','counter')
Output=rbind(bed_D,bed_P) %>% filter(!duplicated(paste(chr,pos,ori,counter)))
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Output generation"))
OutputGenFun(Output,OutputPath,TestID)
writeLines(paste0("[",format(Sys.time(),"%Y-%b-%d %H:%M:%S"),"] ","Done"))
}
callfusion
callfusion(CaseBam='/Users/Hyun-Tae/Documents/papers/juli/data/test01068.sorted.unfiltered.bam',
TargetBed = '/Users/Hyun-Tae/Documents/papers/juli/data/output/test01068.bed',
Thread=3,
Refgene='/Users/Hyun-Tae/Documents/papers/juli/references/refGene_hg19.txt',
Gap='/Users/Hyun-Tae/Documents/papers/juli/references/gap_hg19.txt')
path(BamFile(CaseBam))
gsub(paste0('/',gsub('^.+/','',CaseBam)),'',CaseBam)
scanBamHeader(BamFile(CaseBam))
scanBamHeader(BamFile(CaseBam))
length(scanBamHeader(BamFile(CaseBam)))
scanBamHeader(BamFile(CaseBam)) %>% unlist()
scanBamHeader(BamFile(CaseBam)) %>% unlist() %>% .[grepl('ID',.)]
scanBamHeader(BamFile(CaseBam)) %>% unlist() %>% .[grepl('ID',.)] %>% gsub('^ID:','',.)
scanBamHeader(BamFile(CaseBam)) %>% unlist() %>% .[grepl('ID',.)] %>% gsub('^ID:','',.) %>% as.character()
remove.packages("juliv0.1.1") #2.removing previous package
library(juliv0.1.1)
install.packages('devtools') # install library for JuLI install
library(devtools) # loading library for JuLI install
setwd('/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master') # set download path
install('juliv0.1.1') # install JuLI, (type the downloaded version)
library(juliv0.1.1)
callfusion(CaseBam='/Users/Hyun-Tae/Documents/papers/juli/data/test01068.sorted.unfiltered.bam',
TestID='test01068_0801',
OutputPath='/Users/Hyun-Tae/Documents/papers/juli/data/output',
Thread=3,
Refgene='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/refGene_hg19.txt',
Gap='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/gap_hg19.txt')
annofusion(Output='/Users/Hyun-Tae/Documents/papers/juli/data/outpu/test01068_0801.txt',
Refgene='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/Refgene_hg19.txt',
Cosmic='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/CosmicFusionExport_V76.tsv',
Pfam='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/Pfam-A.full.human',
Uniprot='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/HGNC_GeneName_UniProtID_160524.txt')
annofusion(Output='/Users/Hyun-Tae/Documents/papers/juli/data/output/test01068_0801.txt',
Refgene='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/Refgene_hg19.txt',
Cosmic='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/CosmicFusionExport_V76.tsv',
Pfam='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/Pfam-A.full.human',
Uniprot='/Users/Hyun-Tae/Documents/papers/juli/package/JuLI-master/references/HGNC_GeneName_UniProtID_160524.txt')
